summary(t)
#and couples are significantly higher than that of Buget or Premium,young and mid-age
#singles and couples
library(arules)
library(arulesViz)
#and couples are significantly higher than that of Buget or Premium,young and mid-age
#singles and couples
library(arules)
library(arulesViz)
data_aproriRules<-data %>% select(BRAND) %>%
filter(data$PREMIUM_CUSTOMER=="Mainstream" & data$LIFESTAGE %in% "YOUNG SINGLES/COUPLES")
str(data_aproriRules)
data_aproriRules$BRAND <-as.factor(data_aproriRules$BRAND)
View(data_aproriRules)
str(data_aproriRules)
data_aproriRules<-as(data_aproriRules,"transactions")
class(data_aproriRules)
summary(data_aproriRules)
# creating an item frequency plot for the top 10 brands
itemFrequencyPlot(data_aproriRules,topN=10,type="absolute",
col="green",main="Relative Brand Frequency Plot")
# above plot shows that Kettle Brand and Doritos have the most sales.so to increase the sale of
#Twisties or Tostitos the retailer can put it near Dorios and Kettle
# mining some rules
rules <-apriori(data_aproriRules,
parameter = list(supp=0.002,conf=0.04,maxlen=3))
summary(rules) # in summary lift is 1 so brands are independent
inspect(head(sort(rules,by="support"),16)) # top 10 rules
data_PackSize_Rules <- data %>% select(PACK_SIZE) %>%
filter(data$PREMIUM_CUSTOMER=="Mainstream" & data$LIFESTAGE %in% "YOUNG SINGLES/COUPLES")
data_PackSize_Rules$PACK_SIZE <-as.factor(data_PackSize_Rules$PACK_SIZE)
str(data_PackSize_Rules)
data_PackSize_Rules <-as(data_PackSize_Rules,"transactions")
class(data_PackSize_Rules)
summary(data_PackSize_Rules)
# creating top 10 pack size frequency plot
itemFrequencyPlot(data_PackSize_Rules,topN=20,type="absolute",
col="blue",main="Relative Pack Size Frequency Plot")
# above Pack Size frequency plot shows that our target segment tends
# to buy more medium size 175g & 150g packs
association.rules <-apriori(data_PackSize_Rules,parameter = list(supp=0.001,conf=0.01))
summary(association.rules)
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Budget_Avg_SalePrice
head(transactionData) # checking brands created or not
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice,var.equal = FALSE)
res
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice)
res1 # from above results the unit price per Mainstream,young and mid-age singles
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice)
res1
test_data <-data.table(test_data %>% group_by(PREMIUM_CUSTOMER) %>%
summarise(mean=mean(Avg_Sale_price),sd=sd(Avg_Sale_price)))
library(data.table)
library(readr)
library(ggplot2)
library(ggmosaic)
library(dplyr)
filePath <-"C:/Users/Ashwath Nandan/Downloads/"
transactionData <- fread(paste0(filePath,"QVI_transaction_data.csv"))
customerData <- fread(paste0(filePath,"QVI_purchase_behaviour.csv"))
class(transactionData)
dim(transactionData)
names(transactionData)
head(transactionData,10)
tail(transactionData,10)
str(transactionData)
# changing to DATE integet to date
transactionData$DATE <- as.Date(transactionData$DATE,origin ="1899-12-30")
str(transactionData$DATE)
summary(transactionData$PROD_NAME)
productWords <- data.table(unlist(strsplit(unique(transactionData[, PROD_NAME]), " ")))
productWords
setnames(productWords,'words')
productWords
productWords<-productWords[!grepl("[[:digit:]]",productWords$words),]#remove digits
productWords
productWords<-productWords[!grepl("[[:punct:]]",productWords$words),] #remove special characters
productWords
# finding frequency of words
productWords<-table(productWords)
# sorting productwords by their frequency
productWords<-sort(productWords,decreasing = TRUE)
productWords
transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))] ##remove salsa products
transactionData <- transactionData[SALSA == FALSE, ][, SALSA := NULL]
transactionData
summary(transactionData) #to check for null n oulliers(200 in product quantity outlier)
# filtering the dataset to find outlier 200(where 200 packets are bought)
transactionData %>% filter(PROD_QTY==200)
# to check for other transactions made by the customer who bought 200 packets
transactionData %>% filter(LYLTY_CARD_NBR==226000)
#filter out the customer who bought 200 packets by LYLTY CARD NUMBER
transactionData <-data.table(transactionData %>% select(DATE,STORE_NBR,LYLTY_CARD_NBR,TXN_ID,
PROD_NBR,PROD_NAME,PROD_QTY,TOT_SALES)  %>%filter(LYLTY_CARD_NBR!=226000))
# re=examining the transaction data
summary(transactionData)
# count the no.of taransactions by date
transactions_by_day <- transactionData %>% count(DATE)
count(transactions_by_day)
# creating a sequence of date from 2018-07-01 to 2019-06-30 and join on to the count of transactions by date
transactions_by_day <-data.table(right_join(transactions_by_day
,data.table(seq.Date(as.Date("2018-07-01"),as.Date("2019-06-30"),by="days")),
by=c("DATE"="V1")))
transactions_by_day
# setting plot themes to format graphs
theme_set(theme_bw()) # setting the theme
theme_update(plot.title = element_text(hjust = 0.5))
# visualizing the transactions over time
ggplot(transactions_by_day,aes(x=DATE,y=n)) +
geom_line() +
labs(x="Day",y="Number of transactions",title ="Transactions over time") +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5))
#transactions_by_day %>% filter(between(DATE,as.Date("2018-12-01"),as.Date("2018-12-31")))#
# filtering and visualizing the transactions in month of December to look at individual days
transactions_by_day %>% filter(month(DATE)==12) %>% ggplot(aes(x=DATE,y=n)) +
geom_line() +
labs(x="Day",y="Number of transactions",title = "Transactions in month of December") +
scale_x_date(breaks="1 day") +
theme(axis.text.x = element_text(angle = 90,vjust=0.5))
# creating packsize
transactionData[,PACK_SIZE := parse_number(PROD_NAME)]
# to check packsize look sensible
transactionData[, .N, PACK_SIZE][order(PACK_SIZE)]
# histogram of PACK SIZE
ggplot(transactionData,aes(x=PACK_SIZE)) +
geom_histogram(fill="orange",col="black",binwidth = 20) +
ggtitle("Transactions by PACK SIZE")
#extracting the 1st word from product name to create BRAND column
transactionData[,BRAND := sub("(^\\w+)\\s.+","\\1",PROD_NAME)]
head(transactionData) # checking brands created or not
transactionData[BRAND == "Red", BRAND := "RRD"] # changing BRAND name Red to RRD
unique(transactionData$BRAND) #to check unique names of brand
transactionData[BRAND == "NCC", BRAND := "Natural"]
transactionData[BRAND == "Smith", BRAND := "Smiths"]
transactionData[BRAND == "GrnWves", BRAND := "Grain"]
transactionData[BRAND == "Dorito", BRAND := "Doritos"]
transactionData[BRAND == "WW", BRAND := "Woolworths"]
transactionData[BRAND == "Infzns", BRAND := "Infuzions"]
transactionData[BRAND == "Snbts", BRAND := "Sunbites"]
unique(transactionData$BRAND) # to check for unique names
View(transactionData) # to check results
class(customerData) # checking customer data
names(customerData)
str(customerData)
head(customerData,10)
tail(customerData,10)
summary(customerData)
# change lifestage and premium customer variables of customer data to factor
customerData$LIFESTAGE <- as.factor(customerData$LIFESTAGE)
customerData$PREMIUM_CUSTOMER <- as.factor(customerData$PREMIUM_CUSTOMER)
barplot(table(customerData$LIFESTAGE),main="Barplot of LIFESTAGE")
barplot(table(customerData$PREMIUM_CUSTOMER),main="barplot of Premium customer")
# merging transactionData and customerData
data <- merge(transactionData, customerData, all.x = TRUE)
sum(is.na(data)) # to check for correct match
fwrite(data, paste0(filePath,"QVI_data.csv")) # save data file
#creating and visualizing total sales by lifestage and premium customer
data_TotalSales <- data.table(data %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE) %>%
summarize(SALES=sum(TOT_SALES)))
data_TotalSales
ggplot(data_TotalSales,aes(x=PREMIUM_CUSTOMER,y=SALES,fill=LIFESTAGE)) +
geom_bar(position = "dodge",stat = "identity") +
labs(x="PREMIUM_CUSTOMER",y="Number of SALES",title ="Total Sales by LIFESTAGE & PREMIUM_CUSTOMER")
# creating and visualizing no. of customers by premium customer and lifestage
data_Customer_Total <-data.table(table(data$PREMIUM_CUSTOMER,data$LIFESTAGE))
setnames(data_Customer_Total,c("PREMIUM_CUSTOMER","LIFESTAGE","Customer_Count"))
data_Customer_Total
ggplot(data_Customer_Total,aes(x=PREMIUM_CUSTOMER,y=Customer_Count,fill=LIFESTAGE)) +
geom_bar(position = "dodge",stat = "identity") +
labs(x="PREMIUM_CUSTOMER",y="Total Number of CUSTOMERS",title = "No.of customers by PREMIUM_CUSTOMER & LIFESTAGE")
# creating average no.of units per customer by LIFESTAGE & PREMIUM_CUSTOMER
data_customer_unit <-data.table(data %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE) %>%
summarize(Total_Qty=sum(PROD_QTY)))
data_customer_unit
#MERGING TOTAL CUSTOMER DATA AND NO.OF UNITS PER CUSTOMER AND CREATING AVG UNITS PER CUSTOMER
data_AVG_units <- merge(data_Customer_Total,data_customer_unit) %>%
mutate(Average_units=Total_Qty/Customer_Count)
data_AVG_units
#plot Avg no.of units per customer by LIFESTAGE & PREMIUM_CUSTOMER
ggplot(data_AVG_units,aes(x=PREMIUM_CUSTOMER,y=Average_units,fill=LIFESTAGE)) +
geom_bar(position = "dodge",stat = "identity") +
labs(x="LIFESTAGE",y="Average Units per Customer",title ="Average No.of units by LIFESTAGE and PREMIUM_CUSTOMER")
#creating Avg sale PRICE per customer by LIFESTAGE & PREMIUM_CUSTOMER
data_Avg_SalePrice<- merge(data_TotalSales,data_Customer_Total) %>%
mutate(Avg_Sale_price=(SALES/Customer_Count))
data_Avg_SalePrice
# plot Avg sale price per customer by LIFESTAGE & PREMIUM_CUSTOMER
ggplot(data_Avg_SalePrice,aes(x=PREMIUM_CUSTOMER,y=Avg_Sale_price,fill=LIFESTAGE)) +
geom_bar(position = "dodge",stat = "identity") +
labs(x="LIFESTAGE",y="Average sale price",title ="Average Sale Price by LIFESTAGE and PREMIUM_CUSTOMER")
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Budget_Avg_SalePrice
# filtering avg sale price of MIDAGE and YOUNG SINGLES/COUPLES from Mainstrem
Mainstream_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Mainstream" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Mainstream_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Premium_Avg_SalePrice
test_data <-data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
test_data
test_data <-data.table(test_data %>% group_by(PREMIUM_CUSTOMER) %>%
summarise(mean=mean(Avg_Sale_price),sd=sd(Avg_Sale_price)))
test_data
te <-test_data[1:2,]
te
tes <- t.test(te$mean~te$PREMIUM_CUSTOMER)
data_Avg_SalePrice
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Budget_Avg_SalePrice
test_data <-data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
test_data
# filtering avg sale price of MIDAGE and YOUNG SINGLES/COUPLES from Mainstrem
Mainstream_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Mainstream" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Mainstream_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Premium_Avg_SalePrice
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice)
rop <- t.test(Mainstream_Avg_SalePrice$Avg_Sale_price~Mainstream_Avg_SalePrice$Avg_Sale_price)
rop <- t.test(Mainstream_Avg_SalePrice$Avg_Sale_price~Mainstream_Avg_SalePrice$PREMIUM_CUSTOMER)
rop <- t.test(Mainstream_Avg_SalePrice$Avg_Sale_price~Mainstream_Avg_SalePrice$LIFESTAGE)
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice)
res1
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Budget_Avg_SalePrice
# filtering avg sale price of MIDAGE and YOUNG SINGLES/COUPLES from Mainstrem
Mainstream_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Mainstream" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Mainstream_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Premium_Avg_SalePrice
test_data <-data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
test_data
test_data <-data.table(test_data %>% group_by(PREMIUM_CUSTOMER) %>%
summarise(mean=mean(Avg_Sale_price),sd=sd(Avg_Sale_price)))
test_data
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,rm.na=TRUE)
res1
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,na.rm=TRUE)
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,na.rm=TRUE)
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,na.rm=T)
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,var.equal = TRUE)
res1
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice,var.equal = FALSE)
res1
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER)
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% group_by(data_Avg_Sales$PREMIUM_CUSTOMER)
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% group_by(data_Avg_Sales$PREMIUM_CUSTOMER) %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Budget_Avg_SalePrice
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Budget_Avg_SalePrice
# filtering avg sale price of MIDAGE and YOUNG SINGLES/COUPLES from Mainstrem
Mainstream_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Mainstream" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Mainstream_Avg_SalePrice
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
Premium_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Premium_Avg_SalePrice
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Budget_Avg_SalePrice
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Budget_Avg_SalePrice
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
Premium_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Premium_Avg_SalePrice <- data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
Premium_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(PREMIUM_CUSTOMER,Avg_Sale_price)
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(PREMIUM_CUSTOMER,Avg_Sale_price)
Premium_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(PREMIUM_CUSTOMER,Avg_Sale_price)
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Premium_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(LIFESTAGE,Avg_Sale_price)
# t-test for mainstream vs premium and budget midage & young singles and couples#
#filtering avg sale price of midage and young singles/couples from budget
Budget_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Budget" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Budget_Avg_SalePrice
# filtering avg sale price of MIDAGE and YOUNG SINGLES/COUPLES from Mainstrem
Mainstream_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Mainstream" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Mainstream_Avg_SalePrice
Premium_Avg_SalePrice <- data_Avg_Sales %>%
filter(PREMIUM_CUSTOMER=="Premium" & LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
pull(Avg_Sale_price)
Premium_Avg_SalePrice
test_data <-data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES"))
test_data
test_data <-data_Avg_Sales %>% select(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
summarise(mean=mean(Avg_Sale_price),sd=sd(Avg_Sale_price))
test_data
test_data <-data_Avg_Sales %>% group_by(PREMIUM_CUSTOMER,LIFESTAGE,Avg_Sale_price) %>%
filter(LIFESTAGE %in% c("MIDAGE SINGLES/COUPLES","YOUNG SINGLES/COUPLES")) %>%
summarise(mean=mean(Avg_Sale_price),sd=sd(Avg_Sale_price))
test_data
#creating Avg sale PRICE per customer by LIFESTAGE & PREMIUM_CUSTOMER
data_Avg_SalePrice<- merge(data_TotalSales,data_Customer_Total) %>%
mutate(Avg_Sale_price=(SALES/Customer_Count))
data_Avg_SalePrice
res <- t.test(Budget_Avg_SalePrice,Mainstream_Avg_SalePrice)
res
res1 <- t.test(Mainstream_Avg_SalePrice,Premium_Avg_SalePrice)
res1
pollutantmean <- function(directory, pollutant, id = 1:332)
{
#create a list of files
files_full <- list.files(directory, full.names = TRUE)
# create an empty data frame
dat <- data.frame()
for (i in id)
{
#add files to main data
dat <- rbind(dat, read.csv(files_full[i]))
}
#Calulate mean
mean_data <- mean(dat[, pollutant], na.rm = TRUE)
return(mean_data)
}
View(pollutantmean)
View(pollutantmean)
interested_data <- monitor_data[pollutant]
interested_data <- monitor_data[pollutant]
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- c()
for(monitor in id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
monitor_data <- read.csv(path)
interested_data <- monitor_data[pollutant]
means <- c(means, interested_data[!is.na(interested_data)])
}
mean(means)
}
pollutantmean("specdata", "nitrate", 70:72)
specdata <- read.csv("C:/Users/Ashwath Nandan/Downloads/rprog_data_specdata")
specdata <- read.csv("C:/Users/Ashwath Nandan/Downloads/rprog_data_specdata.csv")
specdata <- read.csv("Ashwath Nandan/Downloads/rprog_data_specdata/specdata")
specdata <- read.csv("Ashwath Nandan/Downloads/rprog_data_specdata/specdata.csv")
getwd()
setwd(C:\Users\Ashwath Nandan\Desktop)
setwd("C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1")
# Read data
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
# Set date format
data[,"Date"] <- as.Date(data[,"Date"],format = "%d/%m/%Y")
# Filter data
subSetData<-subset(data,Date == "2007-02-01" | Date == "2007-02-02")
# Convert string to numeric format
globalActivePower <- as.numeric(subSetData$Global_active_power)
# Make and save plot
png("plot1.png",width = 480, height = 480)
hist(globalActivePower, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", ylab = "Frequency")
dev.off()
source('C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1/plot1.R')
setwd("C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1")
# Read data
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
# Set date format
data[,"Date"] <- as.Date(data[,"Date"],format = "%d/%m/%Y")
# Filter data
sdata<-subset(data,Date == "2007-02-01" | Date == "2007-02-02")
# Date-time format
datet<-strptime(paste(sdata$Date,sdata$Time,sep = " "), "%Y-%m-%d %H:%M:%S" )
# Convert string to numeric format
GlobActPow<-as.numeric(sdata[,"Global_active_power"])
# Make and save plot
png("plot2.png",width = 480, height = 480)
plot(datet,GlobActPow,type = "l",xlab = " ",ylab = "Global Active Power (kilowatts)")
dev.off()
setwd("C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1")
# Read data
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
# Set date format
data[,"Date"] <- as.Date(data[,"Date"],format = "%d/%m/%Y")
# Filter data
subSetData<-subset(data,Date == "2007-02-01" | Date == "2007-02-02")
# Date-time format
datetime<-strptime(paste(subSetData$Date,subSetData$Time,sep = " "), "%Y-%m-%d %H:%M:%S" )
# Convert string to numeric format
globalActivePower <- as.numeric(subSetData$Global_active_power)
# Make and save plot
png("plot2.png",width = 480, height = 480)
plot(datetime,globalActivePower ,type = "l",xlab = " ",ylab = "Global Active Power (kilowatts)")
dev.off()
setwd("C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1")
# Read data
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
# Set date format
data[,"Date"] <- as.Date(data[,"Date"],format = "%d/%m/%Y")
# Filter data
subSetData<-subset(data,Date == "2007-02-01" | Date == "2007-02-02")
# Date-time format
datetime<-strptime(paste(subSetData$Date,subSetData$Time,sep = " "), "%Y-%m-%d %H:%M:%S" )
# Convert string to numeric format
sub1<-as.numeric(subSetData[,"Sub_metering_1"])
sub2<-as.numeric(subSetData[,"Sub_metering_2"])
sub3<-as.numeric(subSetData[,"Sub_metering_3"])
# Make and save plot
png("plot3.png",width = 480, height = 480)
plot(datetime,sub1,col = "black",type = "l", xlab = " ", ylab = "Energy sub metering")
lines(datetime, sub2, col = "red")
lines(datetime, sub3, col = "blue")
legend("topright",
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty = c(1,1,1), col = c("black","red","blue"))
dev.off()
setwd("C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1")
# Read data
data <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE)
# Set date format
data[,"Date"] <- as.Date(data[,"Date"],format = "%d/%m/%Y")
# Filter data
subSetData <- subset(data,Date == "2007-02-01" | Date == "2007-02-02")
globalActivePower <- as.numeric(subSetData$Global_active_power)
datetime <- strptime(paste(subSetData$Date,subSetData$Time,sep = " "), "%Y-%m-%d %H:%M:%S" )
sub1 <- as.numeric(subSetData$Sub_metering_1)
sub2 <- as.numeric(subSetData$Sub_metering_2)
sub3 <- as.numeric(subSetData$Sub_metering_3)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
Volt <- as.numeric(subSetData$Voltage)
png("plot4.png",width = 480, height = 480)
par(mfrow = c(2,2))
# Plot 1
plot(datetime,globalActivePower,type = "l",xlab = " ",ylab = "Global Active Power")
# Plot 2
plot(datetime,Volt,type = "l",xlab = "datetime",ylab = "Voltage")
#Plot 3
plot(datetime,sub1,col = "black",type = "l", xlab = " ", ylab = "Energy sub metering")
lines(datetime, sub2, col = "red")
lines(datetime, sub3, col = "blue")
legend("topright",
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty = c(1,1,1), col = c("black","red","blue"))
#Plot 4
plot(datetime,globalReactivePower,type = "l",xlab = "datetime",ylab = "Global_reactive_power")
dev.off()
source('C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1/plot1.R')
source('C:/Users/Ashwath Nandan/Desktop/ExData_Plotting1/plot1.R')
